Тестова система за проверка на знания по програмиране

доклад на семинар на департамент "Информатика" на 12 май 2014 г.

Преподаването на програмиране на студентите от началните курсове е една трудна
задача за всеки преподавател. Това се обуславя от спецификата на програмирането. ...
Има се предвид 3 основни курса, които се четат обикновено от първи до трети семестър
– Въведение в програмирането, Обектно-ориентирано програмиране и Структури от
данни. 
Усвояването на учебния материал е свързано с придобиване на практически умения за
писане на програми. Затова навсякъде преподаването на програмиране е съставено от две
части – лекции и лабораторни упражнения. 

Обосновка защо тестове?
- без компютър
- на лист хартия
- преписване - различни тестове
- използване на учебни материали по време на теста
- еднаква тежест на всички въпроси



Тестовете са от типа “множествен избор” (multiple choice), всеки въпрос има предло-
жения за 4 отговора, маркирани с а), б), в) и г). За всеки въпрос са възможни всички
вариации с повторения на елементите вярно-невярно (в-н), т.е.
• Всички са верни вввв,
• Един е верен вввн, ввнв, внвв, нввв,
• Два са верни ввнн, внвн, вннв, нввн, нвнв, ннвв,
• Три са верни вннн, нвнн, ннвн, нннв,
• Няма верен нннн.
Броят на вариантите е 4.4 = 16. За всеки отговор студентът има 3 възможности за
определянето му:
• знам, че това е (верен) отговор на въпроса;
• знам, че това е неверен отговор на въпроса, или по-точно, предложението не е отговор
на въпроса;
• не мога да преценя, не знам дали предложението е отговор на въпроса.

Всеки студент получава лист хартия А4 с теста. Всички тестове са различни, което до
голяма степен елиминира елемента на преписване при попълване на теста.

Подготовка
Подготовката на тестовете включва формулиране на въпросите и подбор на отговорите
– верни и неверни. По-точно казано, предложения за отговори на въпросите, като някои
от тях са (верни) отговори, а други не са. Тъй като всеки индивидуален тест съдържа
по 4 предложения, то всеки въпрос трябва да има най-малко 4 отговора. За да се избегне
преписване от съседа, е добре да се подготвят поне 12 предложения за отговори на всеки
въпрос. Въпросите и отговорите формират текстов файл със строго определена структура
(t1_data.tex).

Този файл служи за вход на програма (test_generator), 
която генерира индивидуалните тестове – толкова, 
колкото е броят на студентите. Използва се генератор на случайни
числа за избор и на въпросите и на отговорите на всеки индивидуален тест. Всеки такъв
тест има уникален (обикновено) 4-цифрен номер. 
Програмата генерира LaTeX файлoве: 
- out.tex - сорса за тестовете 
- tab.tex - таблица с отговорите,
- data.tex - входен файл за програмата test_checker. 

От файловете main.tex, out.tex tab.tex компилаторът за LaTeX (напр. MiKTEX за Windows) 
произвежда готов за отпечатване файл main.pdf.


Провеждане

Поне една седмица преди датата на теста въпросите и по два примерни отговора (верен
и грешен) се публикува в Интернет на сайта на курса (Приложение 7.1). Така студентите
имат възможност да се запознаят с теста предварително и при нужда да се свържат с
преподавателя за изясняване или консултация.


Преди да се раздадат индивидуалните тестове се припомнят правилата за провеждане
на теста:
• По време на теста студентите могат да използват лекции, учебници и всякакви други
печатни материали
• На отделен лист хартия или използвайки даден шаблон за отговори, студентите
трябва срещу всяко предложение за отговор поставят или положителен отговор (да,
вярно, истина; yes, correct, true) или отрицателен отговор (не, невярно, неистина; no,
incorrect, false) или неутрално (–, не знам; или нищо; I don’t know).

Ако има питания за неясноти по теста, преподавателят отговаря на въпросите пер-
сонално.

Когато един и същи въпрос е зададен от няколко души, той се обявява на всички, заедно
с отговора. Понякога, използвайки мултимедииния проектор, показвам слайдовете от съ-
ответната лекция, където явно или по-често неявно се съдържа отговорът на зададения
въпрос.

По-подробно за феномена преписване. Класическият подход е когато студентът прави
контролно, тест, явява се на изпит и трябва да покаже какво е научил, му се забраня-
ва да ползва външни източници на информация, т.е. учебният материал се запомня и
после или се възпроизвежда или трябва да се приложи – например за решаване на зада-
чи или писане на програми. В специфичната дейност програмиране, която е основна цел
като придобито умение по тези дисциплини, крайният продукт е компютърна програма.
Написването и е до голяма степен творчески процес и ограничаването на използваната
информация е напълно безсмислено. Например работодател от ИТ индустрията да даде
задача на програмиста за написване на софтуер и да не му дава да използва литература
– напротив, изискването обикновено е да се намери литература и да се създаде софтуера
според най-новите тенденции в специфичната област. Смятам, че този подход трябва да
се прилага още на “студентската скамейка”.

Целта от провеждане на теста е не само да проверим знанията на студентите, а и да
ги накараме да отворят учебника, да потърсят конкретна информация там, да направят
логическата връзка между въпросите на теста и написаното в учебника.

Проверка от преподавателя и анализ на резултатите

При проверката на индивидуален тест всеки въпрос получава тестови точки в интервала
[?4, 4]. Те са сума от точките за всеки отговор, които могат да бъдат:
• +1 когато студентът е дал правилен отговор (да или не);
• ?1 при неправилен отговор;
• 0 при отговор “не знам”.
За целия индивидуален тест се прави сума на броя на точките по всеки въпрос. Нека
тестът съдържа N въпроса, и нека един конкретен тест да е събрал t тестови точки
(t  4N). Ако правенето на теста носи максимално M изпитни точки, то този тест дава
e = tM/4N
изпитни точки на студента. Ако e не е цяло, то се взема най-малкото цяло число,
по-голямо от e – закръгляване нагоре, т.е. в полза на студента (Приложение 7.1).

Често в литературата се срещат препоръки от вида: “Не се препоръчва приписването
на наказателни точки за неправилен отговор, тъй като тогава изпитваните се страхуват
да отговарят, ако не са напълно убедени, и така не показват истинското ниво на своите
знания/умения.” [6]. Аргументът ми за неспазване на това правило е, че програмирането
е специфична дейност и знанията в тази област трябва да са категорични – програмистът
трябва да си дава ясна сметка какво знае и какво не знае. Една съвсем дребна грешка
в компютърна програма (напр. липса на запетая) може да доведе да абсолютно непредвидими 
последици – от “невинна” правописна грешка в някой текст до застрашаване на
човешки живот ила загуба на космически кораб.




Проверка от студента

В началото на следващата лекция се обявяват резултатите от теста и се връщат тестове-
те на студентите. Всеки студент трябва внимателно да види какво е сгрешил, да прецени
дали е съгласен с отбелязаните грешки и ако нещо не му е ясно, да попита. Целта на
тази проверка от студентите е те да осъзнаят грешките си, което очевидно спомага за
по-доброто усвояване на учебния материал.

Освен това, тъй като не е лесно да се формулират кратко и точно някои въпроси, също
така може да има не съвсем ясни предложения за отговори, практиката ми е да приемам
мненията на студентите, които интерпретират по по-различен начин някой въпрос или някой 
отговор и да увеличавам изпитните точки. След проверката понякога събирам всички
тестове (условия и отговори), друг път ги оставям на студентите. Практиката ми е да не
връщам тестове на студенти, които отсъстват от лекцията с проверката.

